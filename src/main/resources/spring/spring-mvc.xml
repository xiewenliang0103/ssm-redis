<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
       
    <!-- 组件扫描路径，springmvc必须扫描@Controller的组件，因为web.xml设置了springmvc随着容器启动进行初始化 -->
    <context:component-scan base-package="com.lx.ssm.controller"></context:component-scan>
    
    <!-- 启用mvc的注解 -->
    <mvc:annotation-driven></mvc:annotation-driven>
    
    <!-- 允许访问静态资源，比如js、css、img -->
    <mvc:default-servlet-handler/>

	<!-- 内容转发视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 视图解析器，可以配置多个视图解析器，springmvc依次进行匹配 -->
		<property name="viewResolvers">
			<list>
				<!-- jsp视图解析器 -->
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
					<!-- order用来指定匹配顺序 -->
					<property name="order" value="1"></property>
				</bean>
			</list>
		</property>
		<!-- 默认视图解析器，当上面的配置的viewResolvers的解析器不能解析时起作用 -->
		<property name="defaultViews">
			<list>
				<!-- json视图解析器 -->
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
				<!-- xml视图解析器，需要增加相应的依赖spring-oxm，并且需要返回的xml对象需要在下面的扫 描中添加 -->
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
							<property name="packagesToScan">
								<list>
									<value>com.lx.ssm.entity</value>
								</list>
							</property>
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 多部件请求解析器，作用是将HttpServletRequest转为MultipartHttpServletRequest得到MultipartFile对象 -->
	<bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 解析请求的编码 -->
        <property name="defaultEncoding" value="utf-8"></property>
        <!-- 最大允许上传文件大小，单位是字节 -->
	    <property name="maxUploadSize" value="1000000"/>
	</bean>
	
	<!-- 异常映射解析器 -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		异常跟视图映射
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArithmeticException">error/500</prop>
				<prop key="java.io.IOException">error/exception</prop>
			</props>
		</property>
		默认错误视图
		<property name="defaultErrorView" value="error/500"></property>
	</bean> -->
	
	<!-- 自定义异常解析器 -->
	<!-- <bean class="com.lx.springmvc.exception.MyExceptionResolver"></bean> -->
	
	<!-- 拦截器 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			拦截的映射地址，**匹配多层路径
			<mvc:mapping path="/user/**"/>
			拦截器处理器
			<bean class="com.lx.springmvc.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors> -->

</beans>